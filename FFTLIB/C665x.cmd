/****************************************************************************/
/*                                                                          */
/*              广州创龙电子科技有限公司                                    */
/*                                                                          */
/*              Copyright (C) 2015 Tronlong Electronic Technology Co.,Ltd   */
/*                                                                          */
/****************************************************************************/
/****************************************************************************/
/*                                                                          */
/*              DSP C665x 内存空间分配定义                                  */
/*                                                                          */
/*              2015年05月04日                                              */
/*                                                                          */
/****************************************************************************/
/* 注意：DSP C6654 及 DSP C6655 仅有一个 DSP 核心！ */
/* 注意：DSP C6654 无多核共享内存！ */

/* 堆栈 */
-heap  0x1000
-stack 0x1000

// 定义设备
#define DSP_C6657
#define DSP_C6657_CORE0

MEMORY
{
/****************************************************************************/
/*                                                                          */
/*              DSP 本地内存区域                                            */
/*                                                                          */
/****************************************************************************/
/* 注意：每个核心的 0x008EFD00 - 0x008FFFFF 这段地址空间启动的时候被 ROM BootLoader（RBL） 占用！ */
/* 注意：核心 0  的 0x00800000 - 0x0081FFFF 这段地址空间启动的时候被 Intermediate BootLoader（IBL） 占用！ */
/* 当启动完成后这两段空间可以被应用程序使用！ */
    LL2RAM     o = 0x00800000  l = 0x00100000  /* 1MB   L2 本地缓存/静态内存 */
    LL1PRAM    o = 0x00E00000  l = 0x00008000  /* 32KB  L1 本地程序缓存/静态内存 */
    LL1DRAM    o = 0x00F00000  l = 0x00008000  /* 32KB  L1 本地缓存/静态内存 */

/****************************************************************************/
/*                                                                          */
/*              DSP 全局内存区域                                            */
/*                                                                          */
/****************************************************************************/
/* 核心 0 */
    SL2IBL0    o = 0x10800000 l = 0x00020000   /* 128KB 核心 0 IBL 保留内存 / L2 缓存/静态内存 */
    SL2RAM0    o = 0x10820000 l = 0x000E0000   /* 896KB 核心 0 L2 缓存/静态内存 */
    SL1PRAM0   o = 0x10E00000 l = 0x00008000   /* 32KB  核心 0 L1 程序缓存/静态内存 */
    SL1DRAM0   o = 0x10F00000 l = 0x00008000   /* 32KB  核心 0 L1 数据缓存/静态内存 */
#ifdef DSP_C6657
/* 核心 1 */
    SL2RAM1    o = 0x11800000 l = 0x00100000   /* 1MB   核心 1 L2 缓存/静态内存 */
    SL1PRAM1   o = 0x11E00000 l = 0x00008000   /* 32KB  核心 1 L1 程序缓存/静态内存 */
    SL1DRAM1   o = 0x11F00000 l = 0x00008000   /* 32KB  核心 1 L1 数据缓存/静态内存 */
#endif
/* Boot ROM */
    SL3ROM(RX) o = 0x20B00000 l = 0x20B20000   /* 128K  L3 ROM  */
/* EMIF 支持 NAND NOR 及 SRAM */
/* 16位 NOR 及 SRAM 32MB 每片选(CS) */
/*  8位 NOR 及 SRAM 16MB 每片选(CS) */
/* NandFlash 不受地址空间限制 */
    EMIF16_CS2 o = 0x70000000 l = 0x04000000   /* 64MB  数据内存 (CS2) */
    EMIF16_CS3 o = 0x74000000 l = 0x04000000   /* 64MB  数据内存 (CS3) */
    EMIF16_CS4 o = 0x78000000 l = 0x04000000   /* 64MB  数据内存 (CS4) */
    EMIF16_CS5 o = 0x7C000000 l = 0x04000000   /* 64MB  数据内存 (CS5) */
/* 共享 */
#ifndef DSP_C6654
    MSMCSRAM   o = 0x0C000000 l = 0x00100000   /* 1MB   多核共享内存 */
#endif
#ifdef DSP_C6657
    DDR3_SHARE o = 0x80000000 l = 0x10000000   /* 256MB DDR3 多核共享内存 */
    DDR3_CORE0 o = 0x90000000 l = 0x08000000   /* 128MB DDR3 核心 0 专用内存 */
    DDR3_CORE1 o = 0x98000000 l = 0x08000000   /* 128MB DDR3 核心 1 专用内存 */
#else
    DDR3       o = 0x80000000 l = 0x20000000   /* 512MB DDR3 */
#endif
}

/* DSP C6657 双核 */
#ifdef DSP_C6657
#ifdef DSP_C6657_CORE0
SECTIONS
{
	.text:_c_int00	>  SL2RAM0                 /* C 语言入口 */
	.text			>  SL2RAM0                 /* 可执行代码及常数 */
	.cinit			>  SL2RAM0                 /* 初始化表（全局及静态变量） */
	.const			>  SL2RAM0                 /* 全局及静态常量 */
	.switch			>  SL2RAM0                 /* 跳转表 */
	.stack			>  SL2RAM0                 /* 栈 */
	.far			>  SL2RAM0                 /* 全局及静态变量（远） */
	.fardata		>  SL2RAM0                 /* 已初始化的非静态全局及静态变量（远） */
	.cio			>  SL2RAM0                 /* C 输入输出缓存 */
	.sysmem			>  SL2RAM0                 /* 动态内存分配区域（堆） */

	.ddr_mem		>  DDR3_CORE0			   // 自定义fft专用空间

	GROUP
	{
	   .neardata							   /* 已初始化的非静态全局及静态变量（近） */
	   .rodata								   /* 全局及静态常量（近） */
	   .bss									   /* 未初始化的全局及静态常量 */
	}				>  SL2RAM0
}
#else
SECTIONS
{
	.text:_c_int00	>  SL2RAM1                 /* C 语言入口 */
	.text			>  SL2RAM1                 /* 可执行代码及常数 */
	.cinit			>  SL2RAM1                 /* 初始化表（全局及静态变量） */
	.const			>  SL2RAM1                 /* 全局及静态常量 */
	.switch			>  SL2RAM1                 /* 跳转表 */
	.stack			>  SL2RAM1                 /* 栈 */
	.far			>  SL2RAM1                 /* 全局及静态变量（远） */
	.fardata		>  SL2RAM1                 /* 已初始化的非静态全局及静态变量（远） */
	.cio			>  SL2RAM1                 /* C 输入输出缓存 */
	.sysmem			>  SL2RAM1                 /* 动态内存分配区域（堆） */

	GROUP
	{
	   .neardata							   /* 已初始化的非静态全局及静态变量（近） */
	   .rodata								   /* 全局及静态常量（近） */
	   .bss									   /* 未初始化的全局及静态常量 */
	}				>  SL2RAM1
}
#endif
#else
/* DSP C6654/55 单核 */
SECTIONS
{
	.text:_c_int00	>  SL2RAM0                 /* C 语言入口 */
	.text			>  SL2RAM0                 /* 可执行代码及常数 */
	.cinit			>  SL2RAM0                 /* 初始化表（全局及静态变量） */
	.const			>  SL2RAM0                 /* 全局及静态常量 */
	.switch			>  SL2RAM0                 /* 跳转表 */
	.stack			>  SL2RAM0                 /* 栈 */
	.far			>  SL2RAM0                 /* 全局及静态变量（远） */
	.fardata		>  SL2RAM0                 /* 已初始化的非静态全局及静态变量（远） */
	.cio			>  SL2RAM0                 /* C 输入输出缓存 */
	.sysmem			>  SL2RAM0                 /* 动态内存分配区域（堆） */

	GROUP
	{
	   .neardata							   /* 已初始化的非静态全局及静态变量（近） */
	   .rodata								   /* 全局及静态常量（近） */
	   .bss									   /* 未初始化的全局及静态常量 */
	}				>  SL2RAM0
}
#endif
